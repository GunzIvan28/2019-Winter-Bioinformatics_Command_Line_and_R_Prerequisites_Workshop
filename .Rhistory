return(area)
}
# let's carry out some test
my.area(side1=3, side2=4, side3=5)
library(knitr)
kable(data.frame(Description=c("Mean", "Standard deviation", "Variance", "Minimum", "Maximum", "Median", "Range of values: minimum and maximum", "Sample quantiles", "Generic function", "Interquartile range"), R_function=c("mean()", "sd()", "var()", "min()", "max()", "median()", "range()", "quantile()", "summary()", "IQR()"), stringsAsFactors=F), align='c') %>% kable_styling(bootstrap_options=c("striped", "hover", "responsive"), full_width=F, position="center")
apply(data, 2, mean)
apply(data, 2, range)
apply(data, 2, quantile)
x <- c(1:50)
y <- 1 + sqrt(x)/2
plot(x,y)
plot(x,y, type="l")
# plot both the points and lines
## first plot points
plot(x,y)
lines(x,y, type="l")
## lines() can only be used to add information to a graph, while it cannot produce a graph on its own.
boxplot(data, xlab="Sample ID", ylab="Raw Counts")
x <- rnorm(1000)
boxplot(x)
hist(x)
# use user defined break points
hist(x, breaks=seq(range(x)[1]-1, range(x)[2]+1, by=0.5))
# clear plotting device/area
dev.off()
library(knitr)
colFmt = function(x,color){
outputFormat = opts_knit$get("rmarkdown.pandoc.to")
if(outputFormat == 'latex')
paste("\\textcolor{",color,"}{",x,"}",sep="")
else if(outputFormat == 'html')
paste("<font color='",color,"'>",x,"</font>",sep="")
else
x
}
knitr::opts_chunk$set(class.source = "colsel")
library(knitr)
library(kableExtra)
kable(data.frame(Operator=paste("<-", " =", sep=","), Description="Assignment", stringsAsFactors=F), align='c', caption="Assignment Operators in R") %>% kable_styling(bootstrap_options="striped", full_width=F, position="left")
kable(data.frame(Operator=c("\\+", "\\-", "\\*", "/", "^", "%%", "%/%"), Description=c("Addition", "Subtraction", "Multiplication", "Division", "Exponent", "Modulus", "Integer Division"), stringsAsFactors=F), align='c', caption="Arithmetic Operators in R") %>% kable_styling(bootstrap_options="striped", full_width=F, position="left")
kable(data.frame(Operator=c("<", ">", "<=", ">=", "==", "!="), Description=c("Less than", "Greater than", "Less than or equal to", "Greater than or equal to", "Equal to", "Not equal to"), stringsAsFactors=F), align='c', caption="Relational Operators in R") %>% kable_styling(bootstrap_options="striped", full_width=F, position="left")
kable(data.frame(Operator=c("!", "&", "&&", "|", "||"), Description=c("Logical NOT", "Element-wise logical AND", "Logical AND", "Element-wise logical OR", "Logical OR"), stringsAsFactors=F), align='c', caption="Logical Operators in R") %>% kable_styling(bootstrap_options="striped", full_width=F, position="left")
# assign number 150 to variable a.
a <- 150
a
# assign a number in scientific format to variable b.
b <- 3e-2
b
# assign a string "BRCA1" to variable gene
gene <- "BRCA1"
gene
# assign a string "Hello World" to variable hello
hello <- "Hello World"
hello
# assign logical value "TRUE" to variable brca1_expressed
brca1_expressed <- TRUE
brca1_expressed
# assign logical value "FALSE" to variable her2_expressed
her2_expressed <- FALSE
her2_expressed
# assign logical value to a variable by logical operation
her2_expression_level <- 0
her2_expressed <- her2_expression_level > 0
her2_expressed
class(her2_expressed)
# To check whether the variable is a specific type
is.numeric(gene)
is.numeric(a)
is.character(gene)
b
as.character(b)
kable(data.frame(Homogeneous=c("Atomic vector", "Matrix", "Array"), Heterogeneous=c("List", "Data frame", ""), row.names=c("1d", "2d", "Nd"), stringsAsFactors=F), align='c') %>% kable_styling(bootstrap_options="striped", full_width=F, position="left")
gene_names <- c("ESR1", "p53", "PI3K", "BRCA1", "EGFR")
gene_names
gene_expression <- c(0, 100, 50, 200, 80)
gene_expression
# assign names to a vector by specifying them
names(gene_expression) <- c("ESR1", "p53", "PI3K", "BRCA1", "EGFR")
gene_expression
# assign names to a vector using another vector
names(gene_expression) <- gene_names
gene_expression
gene_expression <- c(ESR1=0, p53=100, PI3K=50, BRCA1=200, EGFR=80)
gene_expression
length(gene_expression)
col1 <- c(1,3,8,9)
col2 <- c(2,18,27,10)
col3 <- c(8,37,267,19)
my_matrix <- cbind(col1, col2, col3)
my_matrix
rownames(my_matrix) <- c("row1", "row2", "row3", "row4")
my_matrix
t(my_matrix)
ncol(my_matrix)
nrow(my_matrix)
dim(my_matrix)
my_matrix * 3
log10(my_matrix)
rowSums(my_matrix)
colSums(my_matrix)
disease_stage <- factor(c("Stage1", "Stage2", "Stage2", "Stage3", "Stage1", "Stage4"))
disease_stage
levels(disease_stage)
str(disease_stage)
disease_stage <- factor(c("Stage1", "Stage2", "Stage2", "Stage3", "Stage1", "Stage4"), levels=c("Stage2", "Stage1", "Stage3", "Stage4"))
# The encoding for levels are different from above.
str(disease_stage)
summary(disease_stage)
table(disease_stage)
# creating a data frame using pre-defined vectors
patients_name=c("Patient1", "Patient2", "Patient3", "Patient4", "Patient5", "Patient6")
Family_history=c("Y", "N", "Y", "N", "Y", "Y")
patients_age=c(31, 40, 39, 50, 45, 65)
meta.data <- data.frame(patients_name=patients_name, disease_stage=disease_stage, Family_history=Family_history, patients_age=patients_age)
meta.data
is.data.frame(meta.data)
is.data.frame(my_matrix)
class(my_matrix)
my_data <- as.data.frame(my_matrix)
class(my_data)
my_data
t(my_data)
# add a column that has the information on harmful mutations in BRCA1/BRCA2 genes for each patient.
meta.data
meta.data$BRCA <- c("YES", "NO", "YES", "YES", "YES", "NO")
meta.data
# add a column that has the information on the racial information for each patient.
cbind(meta.data, Race=c("AJ", "AS", "AA", "NE", "NE", "AS"))
# rbind can be used to add more rows to a data frame.
rbind(meta.data, data.frame(patients_name="Patient7", disease_stage="S4", Family_history="Y", patients_age=48, BRCA="YES"))
expression.data <- data.frame(patients_name=c("Patient3", "Patient4", "Patient5", "Patient1", "Patient2", "Patient6"), EGFR=c(10, 472, 103784, 1782, 187, 18289), TP53=c(16493, 72, 8193, 1849, 173894, 1482))
expression.data
merge(meta.data, expression.data, by="patients_name")
my_list <- list(1:5, "a", c(TRUE, FALSE, FALSE), c(3.2, 103.0, 82.3))
my_list
str(my_list)
my_list <- list(Ranking=1:5, ID="a", Test=c(TRUE, FALSE, FALSE), Score=c(3.2, 103.0, 82.3))
# display the names of elements in the list using the function *names*, or *str*. Compare the output of *str* with the above results to see the difference.
names(my_list)
str(my_list)
# number of elements in the list
length(my_list)
# first to recall what are stored in gene_names
gene_names
# obtain the first and the third elements
gene_names[c(1,3)]
gene_names[-c(1,3)]
# The following command will produce an error.
gene_names[c(-1, 2)]
gene_names[c(TRUE, FALSE, TRUE, FALSE, FALSE)]
gene_expression
gene_names[gene_expression > 50]
gene_names[c(TRUE, FALSE)]
gene_names[c(TRUE, NA, FALSE, TRUE, NA)]
gene_names[]
gene_expression
gene_expression[c("ESR1", "p53")]
my_list[1]
my_matrix[c(TRUE, FALSE), ]
# recall a data frame created from above: *meta.data*
meta.data
# subset the data frame similarly to a matrix
meta.data[c(TRUE, FALSE, FALSE, TRUE),]
# subset the data frame using one vector
meta.data[c("patients_age", "disease_stage")]
# recall my_list
my_list
# comparing [[ with [ in subsetting a list
my_list[[1]]
my_list[1]
meta.data[["disease_stage"]]
# subsetting a list using $
my_list$Score
# subsetting a data frame using
meta.data$disease_stage
# simplifying subsetting
my_list[[1]]
# preserving subsetting
my_list[1]
kable(data.frame(Simplifying=c("x[[1]]", "x[[1]]", "x[1:3, drop=T]", "x[, 1] or x[[1]]"), Preserving=c("x[1]", "x[1]", "x[1:3]", "x[, 1, drop=F] or x[1]"), row.names=c("Vector", "List", "Factor", "Data frame"), stringsAsFactors=F), align='c') %>% kable_styling(bootstrap_options="striped", full_width=F, position="left")
# There is a very convenient way to read files from the internet.
data <- read.table(file="https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2017-August-Variant-Analysis-Workshop/master/friday/Intro2R/raw_counts.txt", sep="\t", header=T, stringsAsFactors=F)
# To read a local file. If you have downloaded the raw_counts.txt file to your local machine, you may use the following command to read it in, by providing the full path for the file location. The way to specify the full path is the same as taught in the command line session.
data <- read.table(file="./raw_counts.txt", sep="\t", header=T, stringsAsFactors=F)
head(data)
# We are going to read a file over the internet by providing the url of the file.
data2 <- read.csv(file="https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2017-August-Variant-Analysis-Workshop/master/friday/Intro2R/raw_counts.csv", stringsAsFactors=F)
# To look at the file:
head(data2)
# To write to a file called "output.txt" in your current working directory.
write.table(data2[1:20,], file="output.txt", sep="\t", quote=F, row.names=T, col.names=T)
# to find out the current working directory
getwd()
# to set a different working directory, use setwd
#setwd("/Users/jli/Desktop")
# to list all variables in the environment
ls()
# to create a vector from 2 to 3, using increment of 0.1
seq(2, 3, by=0.1)
# to create a vector with repeated elements
rep(1:3, times=3)
rep(1:3, each=3)
# to get help information on a function in R: ?function.name
?seq
?sort
?rep
str(data2)
# recall my_matrix
my_matrix
# check the usage of apply() function
?apply()
# calculate sums for each row
apply(my_matrix, MARGIN=1, sum)
?lapply()
# generate some random data matrix
data <- as.data.frame(matrix(rnorm(49), ncol=7), stringsAsFactors=F)
dim(data)
# calculate the sum for each row
lapply(1:dim(data)[1], function(x){sum(data[x,])})
# comparing the results to apply() results
apply(data, MARGIN=1, sum)
# calculate log10 of the sum of each row
lapply(1:dim(data)[1], function(x){log10(sum(data[x,]))})
# To check the syntax of using sapply():
?sapply()
sapply(1:dim(data)[1], function(x){log10(sum(data[x,]))})
sapply(1:dim(data)[1], function(x){log10(sum(data[x,]))}, simplify=FALSE)
?tapply()
# Let's use Fisher's Iris data to demonstrate the usage of tapply().
# First, load the Iris dataset
data(iris)
# Take a look at how the data looks
head(iris)
# Generate a summary of the sepal lengths for each iris species.
tapply(iris$Sepal.Length, iris$Species, summary)
function.name <- function(arg1=arg1, arg2, ...){
var <- sin(arg1) + sin(arg2)  # carry out tasks
var / 2
}
my.area <- function(side1=side1, side2=side2, side3=side3){
circonference <- (side1 + side2 + side3) / 2
area <- sqrt(circonference * (circonference - side1) * (circonference - side2) * (circonference - side3))
return(area)
}
# let's carry out some test
my.area(side1=3, side2=4, side3=5)
library(knitr)
kable(data.frame(Description=c("Mean", "Standard deviation", "Variance", "Minimum", "Maximum", "Median", "Range of values: minimum and maximum", "Sample quantiles", "Generic function", "Interquartile range"), R_function=c("mean()", "sd()", "var()", "min()", "max()", "median()", "range()", "quantile()", "summary()", "IQR()"), stringsAsFactors=F), align='c') %>% kable_styling(bootstrap_options=c("striped", "hover", "responsive"), full_width=F, position="center")
apply(data, 2, mean)
apply(data, 2, range)
apply(data, 2, quantile)
x <- c(1:50)
y <- 1 + sqrt(x)/2
plot(x,y)
plot(x,y, type="l")
# plot both the points and lines
## first plot points
plot(x,y)
lines(x,y, type="l")
## lines() can only be used to add information to a graph, while it cannot produce a graph on its own.
boxplot(data, xlab="Sample ID", ylab="Raw Counts")
x <- rnorm(1000)
boxplot(x)
hist(x)
# use user defined break points
hist(x, breaks=seq(range(x)[1]-1, range(x)[2]+1, by=0.5))
# clear plotting device/area
dev.off()
library(knitr)
colFmt = function(x,color){
outputFormat = opts_knit$get("rmarkdown.pandoc.to")
if(outputFormat == 'latex')
paste("\\textcolor{",color,"}{",x,"}",sep="")
else if(outputFormat == 'html')
paste("<font color='",color,"'>",x,"</font>",sep="")
else
x
}
knitr::opts_chunk$set(class.source = "colsel")
library(knitr)
library(kableExtra)
kable(data.frame(Operator=paste("<-", " =", sep=","), Description="Assignment", stringsAsFactors=F), align='c', caption="Assignment Operators in R") %>% kable_styling(bootstrap_options="striped", full_width=F, position="left")
kable(data.frame(Operator=c("\\+", "\\-", "\\*", "/", "^", "%%", "%/%"), Description=c("Addition", "Subtraction", "Multiplication", "Division", "Exponent", "Modulus", "Integer Division"), stringsAsFactors=F), align='c', caption="Arithmetic Operators in R") %>% kable_styling(bootstrap_options="striped", full_width=F, position="left")
kable(data.frame(Operator=c("<", ">", "<=", ">=", "==", "!="), Description=c("Less than", "Greater than", "Less than or equal to", "Greater than or equal to", "Equal to", "Not equal to"), stringsAsFactors=F), align='c', caption="Relational Operators in R") %>% kable_styling(bootstrap_options="striped", full_width=F, position="left")
kable(data.frame(Operator=c("!", "&", "&&", "|", "||"), Description=c("Logical NOT", "Element-wise logical AND", "Logical AND", "Element-wise logical OR", "Logical OR"), stringsAsFactors=F), align='c', caption="Logical Operators in R") %>% kable_styling(bootstrap_options="striped", full_width=F, position="left")
# assign number 150 to variable a.
a <- 150
a
# assign a number in scientific format to variable b.
b <- 3e-2
b
# assign a string "BRCA1" to variable gene
gene <- "BRCA1"
gene
# assign a string "Hello World" to variable hello
hello <- "Hello World"
hello
# assign logical value "TRUE" to variable brca1_expressed
brca1_expressed <- TRUE
brca1_expressed
# assign logical value "FALSE" to variable her2_expressed
her2_expressed <- FALSE
her2_expressed
# assign logical value to a variable by logical operation
her2_expression_level <- 0
her2_expressed <- her2_expression_level > 0
her2_expressed
class(her2_expressed)
# To check whether the variable is a specific type
is.numeric(gene)
is.numeric(a)
is.character(gene)
b
as.character(b)
kable(data.frame(Homogeneous=c("Atomic vector", "Matrix", "Array"), Heterogeneous=c("List", "Data frame", ""), row.names=c("1d", "2d", "Nd"), stringsAsFactors=F), align='c') %>% kable_styling(bootstrap_options="striped", full_width=F, position="left")
gene_names <- c("ESR1", "p53", "PI3K", "BRCA1", "EGFR")
gene_names
gene_expression <- c(0, 100, 50, 200, 80)
gene_expression
# assign names to a vector by specifying them
names(gene_expression) <- c("ESR1", "p53", "PI3K", "BRCA1", "EGFR")
gene_expression
# assign names to a vector using another vector
names(gene_expression) <- gene_names
gene_expression
gene_expression <- c(ESR1=0, p53=100, PI3K=50, BRCA1=200, EGFR=80)
gene_expression
length(gene_expression)
col1 <- c(1,3,8,9)
col2 <- c(2,18,27,10)
col3 <- c(8,37,267,19)
my_matrix <- cbind(col1, col2, col3)
my_matrix
rownames(my_matrix) <- c("row1", "row2", "row3", "row4")
my_matrix
t(my_matrix)
ncol(my_matrix)
nrow(my_matrix)
dim(my_matrix)
my_matrix * 3
log10(my_matrix)
rowSums(my_matrix)
colSums(my_matrix)
disease_stage <- factor(c("Stage1", "Stage2", "Stage2", "Stage3", "Stage1", "Stage4"))
disease_stage
levels(disease_stage)
str(disease_stage)
disease_stage <- factor(c("Stage1", "Stage2", "Stage2", "Stage3", "Stage1", "Stage4"), levels=c("Stage2", "Stage1", "Stage3", "Stage4"))
# The encoding for levels are different from above.
str(disease_stage)
summary(disease_stage)
table(disease_stage)
# creating a data frame using pre-defined vectors
patients_name=c("Patient1", "Patient2", "Patient3", "Patient4", "Patient5", "Patient6")
Family_history=c("Y", "N", "Y", "N", "Y", "Y")
patients_age=c(31, 40, 39, 50, 45, 65)
meta.data <- data.frame(patients_name=patients_name, disease_stage=disease_stage, Family_history=Family_history, patients_age=patients_age)
meta.data
is.data.frame(meta.data)
is.data.frame(my_matrix)
class(my_matrix)
my_data <- as.data.frame(my_matrix)
class(my_data)
my_data
t(my_data)
# add a column that has the information on harmful mutations in BRCA1/BRCA2 genes for each patient.
meta.data
meta.data$BRCA <- c("YES", "NO", "YES", "YES", "YES", "NO")
meta.data
# add a column that has the information on the racial information for each patient.
cbind(meta.data, Race=c("AJ", "AS", "AA", "NE", "NE", "AS"))
# rbind can be used to add more rows to a data frame.
rbind(meta.data, data.frame(patients_name="Patient7", disease_stage="S4", Family_history="Y", patients_age=48, BRCA="YES"))
expression.data <- data.frame(patients_name=c("Patient3", "Patient4", "Patient5", "Patient1", "Patient2", "Patient6"), EGFR=c(10, 472, 103784, 1782, 187, 18289), TP53=c(16493, 72, 8193, 1849, 173894, 1482))
expression.data
merge(meta.data, expression.data, by="patients_name")
my_list <- list(1:5, "a", c(TRUE, FALSE, FALSE), c(3.2, 103.0, 82.3))
my_list
str(my_list)
my_list <- list(Ranking=1:5, ID="a", Test=c(TRUE, FALSE, FALSE), Score=c(3.2, 103.0, 82.3))
# display the names of elements in the list using the function *names*, or *str*. Compare the output of *str* with the above results to see the difference.
names(my_list)
str(my_list)
# number of elements in the list
length(my_list)
# first to recall what are stored in gene_names
gene_names
# obtain the first and the third elements
gene_names[c(1,3)]
gene_names[-c(1,3)]
# The following command will produce an error.
gene_names[c(-1, 2)]
gene_names[c(TRUE, FALSE, TRUE, FALSE, FALSE)]
gene_expression
gene_names[gene_expression > 50]
gene_names[c(TRUE, FALSE)]
gene_names[c(TRUE, NA, FALSE, TRUE, NA)]
gene_names[]
gene_expression
gene_expression[c("ESR1", "p53")]
my_list[1]
my_matrix[c(TRUE, FALSE), ]
# recall a data frame created from above: *meta.data*
meta.data
# subset the data frame similarly to a matrix
meta.data[c(TRUE, FALSE, FALSE, TRUE),]
# subset the data frame using one vector
meta.data[c("patients_age", "disease_stage")]
# recall my_list
my_list
# comparing [[ with [ in subsetting a list
my_list[[1]]
my_list[1]
meta.data[["disease_stage"]]
# subsetting a list using $
my_list$Score
# subsetting a data frame using
meta.data$disease_stage
# simplifying subsetting
my_list[[1]]
# preserving subsetting
my_list[1]
kable(data.frame(Simplifying=c("x[[1]]", "x[[1]]", "x[1:3, drop=T]", "x[, 1] or x[[1]]"), Preserving=c("x[1]", "x[1]", "x[1:3]", "x[, 1, drop=F] or x[1]"), row.names=c("Vector", "List", "Factor", "Data frame"), stringsAsFactors=F), align='c') %>% kable_styling(bootstrap_options="striped", full_width=F, position="left")
# There is a very convenient way to read files from the internet.
data <- read.table(file="https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2017-August-Variant-Analysis-Workshop/master/friday/Intro2R/raw_counts.txt", sep="\t", header=T, stringsAsFactors=F)
# To read a local file. If you have downloaded the raw_counts.txt file to your local machine, you may use the following command to read it in, by providing the full path for the file location. The way to specify the full path is the same as taught in the command line session.
data <- read.table(file="./raw_counts.txt", sep="\t", header=T, stringsAsFactors=F)
head(data)
# We are going to read a file over the internet by providing the url of the file.
data2 <- read.csv(file="https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2017-August-Variant-Analysis-Workshop/master/friday/Intro2R/raw_counts.csv", stringsAsFactors=F)
# To look at the file:
head(data2)
# To write to a file called "output.txt" in your current working directory.
write.table(data2[1:20,], file="output.txt", sep="\t", quote=F, row.names=T, col.names=T)
# to find out the current working directory
getwd()
# to set a different working directory, use setwd
#setwd("/Users/jli/Desktop")
# to list all variables in the environment
ls()
# to create a vector from 2 to 3, using increment of 0.1
seq(2, 3, by=0.1)
# to create a vector with repeated elements
rep(1:3, times=3)
rep(1:3, each=3)
# to get help information on a function in R: ?function.name
?seq
?sort
?rep
str(data2)
# recall my_matrix
my_matrix
# check the usage of apply() function
?apply()
# calculate sums for each row
apply(my_matrix, MARGIN=1, sum)
?lapply()
# generate some random data matrix
data <- as.data.frame(matrix(rnorm(49), ncol=7), stringsAsFactors=F)
dim(data)
# calculate the sum for each row
lapply(1:dim(data)[1], function(x){sum(data[x,])})
# comparing the results to apply() results
apply(data, MARGIN=1, sum)
# calculate log10 of the sum of each row
lapply(1:dim(data)[1], function(x){log10(sum(data[x,]))})
# To check the syntax of using sapply():
?sapply()
sapply(1:dim(data)[1], function(x){log10(sum(data[x,]))})
sapply(1:dim(data)[1], function(x){log10(sum(data[x,]))}, simplify=FALSE)
?tapply()
# Let's use Fisher's Iris data to demonstrate the usage of tapply().
# First, load the Iris dataset
data(iris)
# Take a look at how the data looks
head(iris)
# Generate a summary of the sepal lengths for each iris species.
tapply(iris$Sepal.Length, iris$Species, summary)
function.name <- function(arg1=arg1, arg2, ...){
var <- sin(arg1) + sin(arg2)  # carry out tasks
var / 2
}
my.area <- function(side1=side1, side2=side2, side3=side3){
circonference <- (side1 + side2 + side3) / 2
area <- sqrt(circonference * (circonference - side1) * (circonference - side2) * (circonference - side3))
return(area)
}
# let's carry out some test
my.area(side1=3, side2=4, side3=5)
library(knitr)
kable(data.frame(Description=c("Mean", "Standard deviation", "Variance", "Minimum", "Maximum", "Median", "Range of values: minimum and maximum", "Sample quantiles", "Generic function", "Interquartile range"), R_function=c("mean()", "sd()", "var()", "min()", "max()", "median()", "range()", "quantile()", "summary()", "IQR()"), stringsAsFactors=F), align='c') %>% kable_styling(bootstrap_options=c("striped", "hover", "responsive"), full_width=F, position="center")
apply(data, 2, mean)
apply(data, 2, range)
apply(data, 2, quantile)
x <- c(1:50)
y <- 1 + sqrt(x)/2
plot(x,y)
plot(x,y, type="l")
# plot both the points and lines
## first plot points
plot(x,y)
lines(x,y, type="l")
## lines() can only be used to add information to a graph, while it cannot produce a graph on its own.
boxplot(data, xlab="Sample ID", ylab="Raw Counts")
x <- rnorm(1000)
boxplot(x)
hist(x)
# use user defined break points
hist(x, breaks=seq(range(x)[1]-1, range(x)[2]+1, by=0.5))
# clear plotting device/area
dev.off()
